name: "Deploy Serverless AWS ECS"
description: "Deploys Terraform ECS"
inputs:
  service_name:
    description: "service name"
    required: true
  service_stage:
    description: "service stage"
    required: true
  aws_region:
    description: "AWS region"
    required: false
    default: "us-west-2"
  route53_access_key:
    description: "route53 access key"
    required: true
  route53_secret_key:
    description: "route53 secret key"
    required: true
  aws_role_to_assume_env:
    description: "AWS IAM role in deployment env to assume"
    required: true
  timeout:
    description: "Timeout rules for service"
    default: 30
  service_env_vars:
    description: "env vars passed into ECS"
    default: ""

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v2


    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ inputs.aws_role_to_assume_env }}
        aws-region: ${{ inputs.aws_region }}


    - name: Build Docker and Push to ECR for ECS
      id: ecs-ecr-push
      uses: albycom/actions/deploy_docker_to_ecr@main
      with:
        service_name: ${{ inputs.service_name }}
        service_stage: ${{ inputs.service_stage }}
        aws_region: ${{ inputs.aws_region }}
        aws_role_to_assume: ${{ inputs.aws_role_to_assume }}
        timeout: ${{ inputs.timeout }}

    - run: |
        echo "DOCKER_IMAGE_TAG=${{ steps.ecs-ecr-push.outputs.dock_img_tag }}" >> $GITHUB_ENV
        echo "DOCKER_IMAGE_TAG ${{ env.DOCKER_IMAGE_TAG }}"
      shell: bash

    #####################################################
    ############## Run Terraform Steps ##################
    #####################################################
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.4.6

    - name: ECS deploy via Terraform
      run: | 
        cd terraform/deployment
        terraform init -backend-config=${{ inputs.service_stage }}/${{ inputs.service_stage }}_${{ inputs.aws_region }}_backend_config.tfvars 
        terraform plan -var-file=${{ inputs.service_stage }}/${{ inputs.service_stage }}_${{ inputs.aws_region }}.tfvars \
                                      -var "route53_access_key=${{ inputs.route53_access_key }}" \
                                      -var "route53_secret_key=${{ inputs.route53_secret_key }}" \
                                      -var "service_env_vars=${{ inputs.service_env_vars }}" \
                                      -var "docker_image_tag=${{ env.DOCKER_IMAGE_TAG }}"
        terraform apply -auto-approve -var-file=${{ inputs.service_stage }}/${{ inputs.service_stage }}_${{ inputs.aws_region }}.tfvars \
                                      -var "route53_access_key=${{ inputs.route53_access_key }}" \
                                      -var "route53_secret_key=${{ inputs.route53_secret_key }}" \
                                      -var "service_env_vars=${{ inputs.service_env_vars }}" \
                                      -var "docker_image_tag=${{ env.DOCKER_IMAGE_TAG }}"
      shell: bash

    #####################################################
    ############# Run Validation Steps ##################
    #####################################################
    - name: Install jq
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
      shell: bash

    - name: Verify Docker image tag in ECS Task Definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ inputs.service_name }}-fargate-task > task-definition.json
        TASKDEFINITION_IMAGETAG=$(jq -r '.taskDefinition.containerDefinitions[0].image' task-definition.json | cut -d ":" -f 2)
        if [ "$TASKDEFINITION_IMAGETAG" = "${{ env.DOCKER_IMAGE_TAG }}" ]; then
          echo "Image tags match."
        else
          echo "Error: Image tags do not match."
          exit 1
        fi
      shell: bash
