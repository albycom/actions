name: "Deploy GraphQL subgraph to AWS ECS"
description: "Deploys GQL Subgraph ECS"
inputs:
  service_name:
    description: "service name"
    required: true
  service_stage:
    description: "service stage"
    required: true
  aws_region:
    description: "AWS region"
    required: false
    default: "us-west-2"
  route53_access_key:
    description: "route53 access key"
    required: true
  route53_secret_key:
    description: "route53 secret key"
    required: true
  aws_role_to_assume_env:
    description: "AWS IAM role in deployment env to assume"
    required: true
  timeout:
    description: "Timeout rules for service"
    default: 30
  apollo_graph_ref:
    description: "Apollo graph ref"
    required: true
  apollo_key:
    description: "Apollo API key"
    required: true
  apollo_routing_url:
    description: "Apollo routing URL"
    required: true
  service_env_vars:
    description: "env vars passed into ECS"
    default: ""
  docker_image_tag:
    description: "Docker image tag that has been deployed"
    required: false
    default: "latest"

runs:
  using: "composite"
  steps:
    - uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Build and deploy Terraform ECS
      uses: albycom/actions/deploy_terraform_ecs@main
      with:
        service_name: ${{ inputs.service_name }}
        service_stage: ${{ inputs.service_stage }}
        aws_region: ${{ inputs.aws_region }}
        route53_access_key: ${{ inputs.route53_access_key }}
        route53_secret_key: ${{ inputs.route53_secret_key }}
        aws_role_to_assume_env: ${{ inputs.aws_role_to_assume_env }}
        timeout: ${{ inputs.timeout }}
        service_env_vars: ${{ inputs.service_env_vars }}

    - name: Get apollo args
      id: apollo_args
      run: |
        echo "GQL_ROUTING_URL=${{ inputs.apollo_routing_url }}" >> ${GITHUB_ENV}
        echo "APOLLO_KEY=${{ inputs.apollo_key }}" >> ${GITHUB_ENV}
      shell: bash

    - name: Install Rover
      run: |
        curl -sSL https://rover.apollo.dev/nix/v0.1.0 | sh
        # Add Rover to the $GITHUB_PATH so it can be used in another step
        # https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#adding-a-system-path
        echo "$HOME/.rover/bin" >> $GITHUB_PATH
      shell: bash

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ inputs.aws_role_to_assume_env }}
        aws-region: ${{ inputs.aws_region }}

    - name: Install jq
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
      shell: bash
    
    - name: Check ECS service deployment
      run: |
        attempts=0
        while ((attempts < 20))
        do
          response=$(aws ecs describe-services --region ${{ inputs.aws_region }} --services ${{ inputs.service_name }})
          activeTaskDefinition=$(jq -r '.services[0].taskDefinition' <<< "${response}")
          activeImageTag=$(aws ecs describe-task-definition --task-definition $${activeTaskDefinition} | jq -r '.taskDefinition.containerDefinitions[0].image' | cut -d: -f2)
          
          # Add logic to check if the active image tag matches the deployed docker image tag
          if [[ "$activeImageTag" == "${{ inputs.docker_image_tag }}" ]]; then
            echo "ECR image deployed successfully."
            break
          else
            if ((attempts == 19)); then
              echo "ECR image not deploying after 20 attempts. Exiting."
              exit 1
            else
              echo "Waiting for ECR image to deploy..."
              sleep 30
            fi
          fi
          ((attempts++))
        done
      shell: bash

    - name: Publish Schema to Studio using rover
      run: |
        rover subgraph introspect ${{ env.GQL_ROUTING_URL }} | rover subgraph publish ${{ inputs.apollo_graph_ref }} --name ${{ inputs.service_name }} --schema - --routing-url ${{ env.GQL_ROUTING_URL }}
      shell: bash
