name: "Migrate and Deploy GraphQL subgraph to AWS EKS"
description: "Deploys GQL Subgraph EKS"
inputs:
  service_name:
    description: "service name"
    required: true
  service_stage:
    description: "service stage"
    required: true
  aws_region:
    description: "AWS region"
    required: false
    default: "us-west-2"
  aws_role_to_assume_env:
    description: "AWS IAM role in deployment env to assume"
    required: true
  timeout:
    description: "Timeout rules for service"
    default: 30
  apollo_graph_ref:
    description: "Apollo graph ref"
    required: true
  apollo_key:
    description: "Apollo API key"
    required: true
  apollo_routing_url:
    description: "Apollo routing URL"
    required: true
  service_env_vars:
    description: "env vars passed into EKS"
    default: ""
  ssh_key:
    description: "SSH key to inject into docker build"
    required: false
  route53_access_key:
    description: "route53 access key"
    required: true
  route53_secret_key:
    description: "route53 secret key"
    required: true
  jfrog_pypi_user:
    description: "jfrog user"
    required: false
  jfrog_pypi_token:
    description: "jfrog token"
    required: false

runs:
  using: "composite"
  steps:
    - uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Checkout
      uses: actions/checkout@v2

    - if: inputs.ssh_key != ''
      uses: webfactory/ssh-agent@v0.7.0
      with:
          ssh-private-key: ${{ inputs.ssh_key }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ inputs.aws_role_to_assume_env }}
        aws-region: ${{ inputs.aws_region }}

    #####################################################
    ############## Run ECR Upload Steps #################
    #####################################################
    # Login to AWS ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Set the timestamp
    - name: Get the current date for the image tag
      id: date
      run: echo "::set-output name=IMAGE_TAG::$(date +'%Y%m%d%H%M%S')"
      shell: bash

    - if: inputs.ssh_key != '' && inputs.jfrog_pypi_user == ''
      name: Build docker image with SSH key
      env:
        SERVICE_NAME: ${{ inputs.service_name }}
      run: |
        DOCKER_BUILDKIT=1 docker buildx build --ssh default --platform=linux/amd64 -f ./src/Dockerfile -t "$SERVICE_NAME" ./src/
      shell: bash


    - if: inputs.ssh_key != '' && inputs.jfrog_pypi_user != ''
      name: Build docker image without SSH key and jfrog
      env:
        SERVICE_NAME: ${{ inputs.service_name }}
        JFROG_PYPI_USER: ${{ inputs.jfrog_pypi_user }}
        JFROG_PYPI_TOKEN: ${{ inputs.jfrog_pypi_token }}
      run: |
        DOCKER_BUILDKIT=1 docker buildx build --ssh default --build-arg JFROG_PYPI_USER=$JFROG_PYPI_USER --build-arg JFROG_PYPI_TOKEN=$JFROG_PYPI_TOKEN --platform=linux/amd64 -f ./src/Dockerfile -t "$SERVICE_NAME" ./src/
      shell: bash

    - if: inputs.ssh_key == ''
      name: Build docker image without SSH key
      env:
        SERVICE_NAME: ${{ inputs.service_name }}
      run: |
        DOCKER_BUILDKIT=1 docker buildx build --platform=linux/amd64 -f ./src/Dockerfile -t "$SERVICE_NAME" ./src/
      shell: bash

    # Build, Tag, and Push the Docker image
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.service_name }}
        IMAGE_TAG: ${{ steps.date.outputs.IMAGE_TAG }}
        SERVICE_NAME: ${{ inputs.service_name }}
      run: |
        docker tag "$SERVICE_NAME" "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      shell: bash

    - name: Pass Docker image tag to the environment
      env:
        IMAGE_TAG: ${{ steps.date.outputs.IMAGE_TAG }}
      run: echo "DOCKER_IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
      shell: bash

    #####################################################
    ############## Run Terraform Steps ##################
    #####################################################
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.4.6

    - name: ECS deploy via Terraform
      run: | 
        echo "DOCKER_IMAGE_TAG ${{ env.DOCKER_IMAGE_TAG }}"
        cd terraform/deployment
        terraform init -backend-config=${{ inputs.service_stage }}/${{ inputs.service_stage }}_${{ inputs.aws_region }}_backend_config.tfvars 
        terraform apply -auto-approve -var-file=${{ inputs.service_stage }}/${{ inputs.service_stage }}_${{ inputs.aws_region }}.tfvars \
                                      -var "route53_access_key=${{ inputs.route53_access_key }}" \
                                      -var "route53_secret_key=${{ inputs.route53_secret_key }}" \
                                      -var "service_env_vars=${{ inputs.service_env_vars }}" \
                                      -var "docker_image_tag=${{ env.DOCKER_IMAGE_TAG }}"
      shell: bash

    - name: Get apollo args
      id: apollo_args
      run: |
        echo "GQL_ROUTING_URL=${{ inputs.apollo_routing_url }}" >> ${GITHUB_ENV}
        echo "APOLLO_KEY=${{ inputs.apollo_key }}" >> ${GITHUB_ENV}
      shell: bash

    - name: Install Rover
      run: |
        curl -sSL https://rover.apollo.dev/nix/v0.20.0 | sh
        # Add Rover to the $GITHUB_PATH so it can be used in another step
        # https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#adding-a-system-path
        echo "$HOME/.rover/bin" >> $GITHUB_PATH
      shell: bash

    - name: Continuously publish schema to Apollo Studio
      run: |
        for i in {1..6}; do
          echo "Running Schema Publishing: $i"
          rover subgraph introspect ${{ env.GQL_ROUTING_URL }} | rover subgraph publish ${{ inputs.apollo_graph_ref }} --name ${{ inputs.service_name }} --schema - --routing-url ${{ env.GQL_ROUTING_URL }}    
          sleep 5
        done
      shell: bash

    # - name: Publish Schema to Studio using rover
    #   run: |
    #     rover subgraph introspect ${{ env.GQL_ROUTING_URL }} | rover subgraph publish ${{ inputs.apollo_graph_ref }} --name ${{ inputs.service_name }} --schema - --routing-url ${{ env.GQL_ROUTING_URL }}
    #   shell: bash

        