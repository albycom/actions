name: "Deploy Serverless AWS EKS"
description: "Deploys Terraform EKS"
inputs:
  service_name:
    description: "service name"
    required: true
  service_stage:
    description: "service stage"
    required: true
  aws_region:
    description: "AWS region"
    required: false
    default: "us-west-2"
  route53_access_key:
    description: "route53 access key"
    required: true
  route53_secret_key:
    description: "route53 secret key"
    required: true
  aws_role_to_assume_env:
    description: "AWS IAM role in deployment env to assume"
    required: true
  timeout:
    description: "Timeout rules for service"
    default: 30
  service_env_vars:
    description: "env vars passed into ECS"
    default: ""
  lambda_docker_file:
    description: "name of lambda docker in src/"
    required: true
  lambda_ecr_repo:
    description: "ecr repo name of lambda img"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v2


    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ inputs.aws_role_to_assume_env }}
        aws-region: ${{ inputs.aws_region }}

    #####################################################
    ############## Run ECR Upload Steps #################
    #####################################################
    # Login to AWS ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Set the timestamp
    - name: Get the current date for the image tag
      id: date
      run: echo "::set-output name=IMAGE_TAG::$(date +'%Y%m%d%H%M%S')"
      shell: bash

    # Build, Tag, and Push the Docker image for ECR
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.service_name }}
        IMAGE_TAG: ${{ steps.date.outputs.IMAGE_TAG }}
        SERVICE_NAME: ${{ inputs.service_name }}
      run: |
        pwd
        ls -al
        docker buildx build --platform=linux/amd64 -f ./src/Dockerfile -t "$SERVICE_NAME" ./src/
        docker tag "$SERVICE_NAME" "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      shell: bash

    - name: Pass Docker image tag to the environment
      env:
        IMAGE_TAG: ${{ steps.date.outputs.IMAGE_TAG }}
      run: echo "DOCKER_IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
      shell: bash

    # Build, Tag, and Push the Docker image for Lambda
    - name: Build, tag, and push image to Lambda
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.lambda_ecr_repo }}
        IMAGE_TAG: ${{ steps.date.outputs.IMAGE_TAG }}
        SERVICE_NAME: ${{ inputs.lambda_ecr_repo }}
      run: |
        pwd
        ls -al
        docker buildx build --platform=linux/amd64 -f ./src/${{ inputs.lambda_docker_file }} -t "$SERVICE_NAME" ./src/
        docker tag "$SERVICE_NAME" "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      shell: bash

    #####################################################
    ############## Run Terraform Steps ##################
    #####################################################
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.4.6

    - name: EKS deploy via Terraform
      run: | 
        echo "DOCKER_IMAGE_TAG ${{ env.DOCKER_IMAGE_TAG }}"
        cd terraform/deployment
        terraform init -backend-config=${{ inputs.service_stage }}/${{ inputs.service_stage }}_${{ inputs.aws_region }}_backend_config.tfvars 
        terraform apply -auto-approve -var-file=${{ inputs.service_stage }}/${{ inputs.service_stage }}_${{ inputs.aws_region }}.tfvars \
                                      -var "route53_access_key=${{ inputs.route53_access_key }}" \
                                      -var "route53_secret_key=${{ inputs.route53_secret_key }}" \
                                      -var "service_env_vars=${{ inputs.service_env_vars }}" \
                                      -var "docker_image_tag=${{ env.DOCKER_IMAGE_TAG }}"
      shell: bash
